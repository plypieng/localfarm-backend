// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 1. Datasource: Specifies your database connection.
// We're using PostgreSQL. The URL is loaded from the .env file.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 2. Generator: Specifies that you want to generate Prisma Client.
generator client {
  provider = "prisma-client-js"
}

// 3. NextAuth.js Models: These are required for the Prisma adapter.

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?  @db.Text
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Custom fields
  chatMessages  ChatMessage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 4. Custom Application Models

model ChatMessage {
  id        String   @id @default(cuid())
  role      String // "user" or "assistant"
  content   String   @db.Text
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
